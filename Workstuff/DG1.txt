package cards;

import java.util.ArrayList;
import java.util.List;

public class DumbGame {
    private Deck deck;
    private Hand hand1;
    private Hand hand2;
    private Card trumpCard;
    private Suit trumpSuit;

    public DumbGame() {
        deck = new DumbDeck();
        deck.shuffle();
        hand1 = new DumbHand();
        hand1 = new DumbHand();
        init();
    }

    void init() {
        for (int i = 0; i < 6; i++) {
            hand1.add(deck.deal());
            hand2.add(deck.deal());
        }
        trumpCard = deck.deal();
        trumpSuit = trumpCard.getSuit();
    }

    void resetGame() {
        deck.restore();
        deck.shuffle();
        hand1.clear();
        hand2.clear();
        init();
    }

    public void play() {
        Hand mover = hand1;
        Hand shaker = hand2;
        ArrayList<Card> cardsInAction = new ArrayList<Card>();
        while (!hand1.isEmpty() || hand2.isEmpty()) {
            cardsInAction.clear();
            int mi = canMove(mover, cardsInAction);
            while (!(mi < 0)) {
                Card moveCard = mover.remove(mi);
                cardsInAction.add(moveCard);
                if (canBeat(shaker, moveCard)) {
                    cardsInAction.add(beat(shaker));
                } else {
                    addToShaker(shaker, cardsInAction);
                    break;
                }
            }
            swapHands(mover, shaker);
        }
    }

    private void swapHands(Hand mover, Hand shaker) {
        Hand h = mover;
        mover = shaker;
        shaker = h;
    }

    private void addToShaker(Hand shaker, ArrayList<Card> cardsInAction) {
        for (Card card : cardsInAction) {
            shaker.add(card);
        }
    }

    private int canMove(Hand mover, ArrayList<Card> cardsInAction) {
        for (Card card : cardsInAction) {
            for (int i = 0; i < mover.size(); i++) {
                if (mover.getCard(i).getRank().equals(card.getRank())) return i;
            }
        }
        return -1;
    }


}
